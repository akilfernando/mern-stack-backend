openapi: 3.0.0
info:
  title: ProdManager API
  version: 1.0.0
  description: API documentation for the ProdManager application, including product management and user authentication.
servers:
  - url: http://localhost:5000/api
    description: Local Development Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      required:
        - title
        - image
        - description
        - price
      properties:
        _id:
          type: string
          description: The auto-generated ID of the product
        title:
          type: string
          description: The title of the product
        image:
          type: string
          description: URL of the product image
        description:
          type: string
          description: Detailed description of the product
        price:
          type: number
          format: float
          description: Price of the product
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User:
      type: object
      required:
        - fullName
        - email
        - phone
        - password
      properties:
        _id:
          type: string
        fullName:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
          format: password
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    RegisterInput:
      type: object
      required:
        - fullName
        - email
        - phone
        - password
        - confirmPassword # Note: confirmPassword is for frontend validation, not stored in DB
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
          format: password
        confirmPassword:
          type: string
          format: password
    AuthResponse:
      type: object
      properties:
        _id:
          type: string
        fullName:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string
        token:
          type: string

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request (e.g., missing fields, user exists)
  /auth/login:
    post:
      summary: Login user and get JWT
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid email or password
  /products:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Add a new product (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request (e.g., missing fields)
        '401':
          description: Unauthorized (no token or invalid token)
        '403':
          description: Forbidden (user does not have admin role)
  /products/{id}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The product ID
      responses:
        '200':
          description: A single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '400':
          description: Invalid ID format
    put:
      summary: Update a product by ID (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request (e.g., missing fields, invalid ID)
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
    delete:
      summary: Delete a product by ID (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The product ID
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid ID format
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found